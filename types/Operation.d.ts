/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OperationInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_STATUS()": FunctionFragment;
    "aUST()": FunctionFragment;
    "controller()": FunctionFragment;
    "currentStatus()": FunctionFragment;
    "emergencyWithdraw(address,address)": FunctionFragment;
    "finish(uint256)": FunctionFragment;
    "finishDepositStable()": FunctionFragment;
    "finishRedeemStable()": FunctionFragment;
    "getCurrentStatus()": FunctionFragment;
    "halt()": FunctionFragment;
    "initDepositStable(address,uint256,address,address,bool)": FunctionFragment;
    "initPayload(address,address,bytes32)": FunctionFragment;
    "initRedeemStable(address,uint256,address,address,bool)": FunctionFragment;
    "initialize(bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "recover()": FunctionFragment;
    "router()": FunctionFragment;
    "terraAddress()": FunctionFragment;
    "transferController(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferRouter(address)": FunctionFragment;
    "wUST()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_STATUS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aUST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "finish",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finishDepositStable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finishRedeemStable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "halt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initDepositStable",
    values: [string, BigNumberish, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "initPayload",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initRedeemStable",
    values: [string, BigNumberish, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "recover", values?: undefined): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "terraAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRouter",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "wUST", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_STATUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aUST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finish", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishDepositStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishRedeemStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "halt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initDepositStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initRedeemStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "terraAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wUST", data: BytesLike): Result;

  events: {
    "AutoFinishEnabled(address)": EventFragment;
    "EmergencyWithdrawActivated(address,uint256)": EventFragment;
    "FinishDeposit(address,uint256)": EventFragment;
    "FinishRedemption(address,uint256)": EventFragment;
    "InitDeposit(address,uint256,bytes32)": EventFragment;
    "InitRedemption(address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AutoFinishEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinishDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinishRedemption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitRedemption"): EventFragment;
}

export type AutoFinishEnabledEvent = TypedEvent<
  [string] & { operation: string }
>;

export type EmergencyWithdrawActivatedEvent = TypedEvent<
  [string, BigNumber] & { token: string; amount: BigNumber }
>;

export type FinishDepositEvent = TypedEvent<
  [string, BigNumber] & { operator: string; amount: BigNumber }
>;

export type FinishRedemptionEvent = TypedEvent<
  [string, BigNumber] & { operator: string; amount: BigNumber }
>;

export type InitDepositEvent = TypedEvent<
  [string, BigNumber, string] & {
    operator: string;
    amount: BigNumber;
    to: string;
  }
>;

export type InitRedemptionEvent = TypedEvent<
  [string, BigNumber, string] & {
    operator: string;
    amount: BigNumber;
    to: string;
  }
>;

export class Operation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OperationInterface;

  functions: {
    DEFAULT_STATUS(
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, BigNumber, string, string, string, string] & {
        status: number;
        typ: number;
        operator: string;
        amount: BigNumber;
        input: string;
        output: string;
        swapper: string;
        swapDest: string;
      }
    >;

    aUST(overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    currentStatus(
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, BigNumber, string, string, string, string] & {
        status: number;
        typ: number;
        operator: string;
        amount: BigNumber;
        input: string;
        output: string;
        swapper: string;
        swapDest: string;
      }
    >;

    "emergencyWithdraw(address,address)"(
      _token: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(address)"(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "finish(uint256)"(
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "finish()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishDepositStable(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishRedeemStable(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentStatus(
      overrides?: CallOverrides
    ): Promise<
      [
        [number, number, string, BigNumber, string, string, string, string] & {
          status: number;
          typ: number;
          operator: string;
          amount: BigNumber;
          input: string;
          output: string;
          swapper: string;
          swapDest: string;
        }
      ]
    >;

    halt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initDepositStable(
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      _autoFinish: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initPayload(
      _router: string,
      _controller: string,
      _terraAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initRedeemStable(
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      _autoFinish: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recover(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    terraAddress(overrides?: CallOverrides): Promise<[string]>;

    transferController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wUST(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_STATUS(
    overrides?: CallOverrides
  ): Promise<
    [number, number, string, BigNumber, string, string, string, string] & {
      status: number;
      typ: number;
      operator: string;
      amount: BigNumber;
      input: string;
      output: string;
      swapper: string;
      swapDest: string;
    }
  >;

  aUST(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  currentStatus(
    overrides?: CallOverrides
  ): Promise<
    [number, number, string, BigNumber, string, string, string, string] & {
      status: number;
      typ: number;
      operator: string;
      amount: BigNumber;
      input: string;
      output: string;
      swapper: string;
      swapDest: string;
    }
  >;

  "emergencyWithdraw(address,address)"(
    _token: string,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(address)"(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "finish(uint256)"(
    _minAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "finish()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishDepositStable(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishRedeemStable(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentStatus(
    overrides?: CallOverrides
  ): Promise<
    [number, number, string, BigNumber, string, string, string, string] & {
      status: number;
      typ: number;
      operator: string;
      amount: BigNumber;
      input: string;
      output: string;
      swapper: string;
      swapDest: string;
    }
  >;

  halt(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initDepositStable(
    _operator: string,
    _amount: BigNumberish,
    _swapper: string,
    _swapDest: string,
    _autoFinish: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initPayload(
    _router: string,
    _controller: string,
    _terraAddress: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  initRedeemStable(
    _operator: string,
    _amount: BigNumberish,
    _swapper: string,
    _swapDest: string,
    _autoFinish: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    args: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  recover(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  terraAddress(overrides?: CallOverrides): Promise<string>;

  transferController(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferRouter(
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wUST(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_STATUS(
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, BigNumber, string, string, string, string] & {
        status: number;
        typ: number;
        operator: string;
        amount: BigNumber;
        input: string;
        output: string;
        swapper: string;
        swapDest: string;
      }
    >;

    aUST(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    currentStatus(
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, BigNumber, string, string, string, string] & {
        status: number;
        typ: number;
        operator: string;
        amount: BigNumber;
        input: string;
        output: string;
        swapper: string;
        swapDest: string;
      }
    >;

    "emergencyWithdraw(address,address)"(
      _token: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(address)"(
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "finish(uint256)"(
      _minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "finish()"(overrides?: CallOverrides): Promise<void>;

    finishDepositStable(overrides?: CallOverrides): Promise<void>;

    finishRedeemStable(overrides?: CallOverrides): Promise<void>;

    getCurrentStatus(
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, BigNumber, string, string, string, string] & {
        status: number;
        typ: number;
        operator: string;
        amount: BigNumber;
        input: string;
        output: string;
        swapper: string;
        swapDest: string;
      }
    >;

    halt(overrides?: CallOverrides): Promise<void>;

    initDepositStable(
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      _autoFinish: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    initPayload(
      _router: string,
      _controller: string,
      _terraAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    initRedeemStable(
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      _autoFinish: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(args: BytesLike, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    recover(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    terraAddress(overrides?: CallOverrides): Promise<string>;

    transferController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(_owner: string, overrides?: CallOverrides): Promise<void>;

    transferRouter(_router: string, overrides?: CallOverrides): Promise<void>;

    wUST(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AutoFinishEnabled(address)"(
      operation?: string | null
    ): TypedEventFilter<[string], { operation: string }>;

    AutoFinishEnabled(
      operation?: string | null
    ): TypedEventFilter<[string], { operation: string }>;

    "EmergencyWithdrawActivated(address,uint256)"(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    EmergencyWithdrawActivated(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    "FinishDeposit(address,uint256)"(
      operator?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { operator: string; amount: BigNumber }
    >;

    FinishDeposit(
      operator?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { operator: string; amount: BigNumber }
    >;

    "FinishRedemption(address,uint256)"(
      operator?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { operator: string; amount: BigNumber }
    >;

    FinishRedemption(
      operator?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { operator: string; amount: BigNumber }
    >;

    "InitDeposit(address,uint256,bytes32)"(
      operator?: string | null,
      amount?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { operator: string; amount: BigNumber; to: string }
    >;

    InitDeposit(
      operator?: string | null,
      amount?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { operator: string; amount: BigNumber; to: string }
    >;

    "InitRedemption(address,uint256,bytes32)"(
      operator?: string | null,
      amount?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { operator: string; amount: BigNumber; to: string }
    >;

    InitRedemption(
      operator?: string | null,
      amount?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { operator: string; amount: BigNumber; to: string }
    >;
  };

  estimateGas: {
    DEFAULT_STATUS(overrides?: CallOverrides): Promise<BigNumber>;

    aUST(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    currentStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "emergencyWithdraw(address,address)"(
      _token: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emergencyWithdraw(address)"(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "finish(uint256)"(
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "finish()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishDepositStable(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishRedeemStable(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentStatus(overrides?: CallOverrides): Promise<BigNumber>;

    halt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initDepositStable(
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      _autoFinish: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initPayload(
      _router: string,
      _controller: string,
      _terraAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initRedeemStable(
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      _autoFinish: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recover(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    terraAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wUST(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_STATUS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aUST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "emergencyWithdraw(address,address)"(
      _token: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(address)"(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "finish(uint256)"(
      _minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "finish()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishDepositStable(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishRedeemStable(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    halt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initDepositStable(
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      _autoFinish: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initPayload(
      _router: string,
      _controller: string,
      _terraAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initRedeemStable(
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      _autoFinish: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recover(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    terraAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wUST(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
