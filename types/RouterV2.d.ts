/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RouterV2Interface extends ethers.utils.Interface {
  functions: {
    "aUST()": FunctionFragment;
    "depositStable(uint256)": FunctionFragment;
    "finish(address)": FunctionFragment;
    "finishDepositStable(address)": FunctionFragment;
    "finishRedeemStable(address)": FunctionFragment;
    "init(uint8,address,uint256,address,address,bool)": FunctionFragment;
    "initDepositStable(uint256,address,address)": FunctionFragment;
    "initRedeemStable(uint256)": FunctionFragment;
    "isDepositAllowed()": FunctionFragment;
    "isRedemptionAllowed()": FunctionFragment;
    "optFactory()": FunctionFragment;
    "optStdId()": FunctionFragment;
    "optStore()": FunctionFragment;
    "owner()": FunctionFragment;
    "redeemStable(address,uint256,address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDepositAllowance(bool)": FunctionFragment;
    "setOperationFactory(address)": FunctionFragment;
    "setOperationId(uint256)": FunctionFragment;
    "setOperationStore(address)": FunctionFragment;
    "setRedemptionAllowance(bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wUST()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "aUST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositStable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "finish", values: [string]): string;
  encodeFunctionData(
    functionFragment: "finishDepositStable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "finishRedeemStable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [BigNumberish, string, BigNumberish, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "initDepositStable",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initRedeemStable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDepositAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRedemptionAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "optStdId", values?: undefined): string;
  encodeFunctionData(functionFragment: "optStore", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemStable",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositAllowance",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperationFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperationId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperationStore",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptionAllowance",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "wUST", values?: undefined): string;

  decodeFunctionResult(functionFragment: "aUST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finish", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishDepositStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishRedeemStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initDepositStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initRedeemStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDepositAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRedemptionAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "optFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "optStdId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "optStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperationFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperationId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperationStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptionAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wUST", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class RouterV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RouterV2Interface;

  functions: {
    aUST(overrides?: CallOverrides): Promise<[string]>;

    "depositStable(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositStable(address,uint256)"(
      _operator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositStable(address,uint256,address,address)"(
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finish(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishDepositStable(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishRedeemStable(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      _type: BigNumberish,
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      _autoFinish: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initDepositStable(uint256,address,address)"(
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initDepositStable(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initRedeemStable(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initRedeemStable(uint256,address,address)"(
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isDepositAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    isRedemptionAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    optFactory(overrides?: CallOverrides): Promise<[string]>;

    optStdId(overrides?: CallOverrides): Promise<[BigNumber]>;

    optStore(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "redeemStable(address,uint256,address,address)"(
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemStable(address,uint256)"(
      _operator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemStable(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositAllowance(
      _allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperationFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperationId(
      _optStdId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperationStore(
      _store: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRedemptionAllowance(
      _allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wUST(overrides?: CallOverrides): Promise<[string]>;
  };

  aUST(overrides?: CallOverrides): Promise<string>;

  "depositStable(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositStable(address,uint256)"(
    _operator: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositStable(address,uint256,address,address)"(
    _operator: string,
    _amount: BigNumberish,
    _swapper: string,
    _swapDest: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finish(
    _operation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishDepositStable(
    _operation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishRedeemStable(
    _operation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    _type: BigNumberish,
    _operator: string,
    _amount: BigNumberish,
    _swapper: string,
    _swapDest: string,
    _autoFinish: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initDepositStable(uint256,address,address)"(
    _amount: BigNumberish,
    _swapper: string,
    _swapDest: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initDepositStable(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initRedeemStable(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initRedeemStable(uint256,address,address)"(
    _amount: BigNumberish,
    _swapper: string,
    _swapDest: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isDepositAllowed(overrides?: CallOverrides): Promise<boolean>;

  isRedemptionAllowed(overrides?: CallOverrides): Promise<boolean>;

  optFactory(overrides?: CallOverrides): Promise<string>;

  optStdId(overrides?: CallOverrides): Promise<BigNumber>;

  optStore(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "redeemStable(address,uint256,address,address)"(
    _operator: string,
    _amount: BigNumberish,
    _swapper: string,
    _swapDest: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemStable(address,uint256)"(
    _operator: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemStable(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositAllowance(
    _allow: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperationFactory(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperationId(
    _optStdId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperationStore(
    _store: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRedemptionAllowance(
    _allow: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wUST(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    aUST(overrides?: CallOverrides): Promise<string>;

    "depositStable(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "depositStable(address,uint256)"(
      _operator: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "depositStable(address,uint256,address,address)"(
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      overrides?: CallOverrides
    ): Promise<string>;

    finish(_operation: string, overrides?: CallOverrides): Promise<void>;

    finishDepositStable(
      _operation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    finishRedeemStable(
      _operation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    init(
      _type: BigNumberish,
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      _autoFinish: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "initDepositStable(uint256,address,address)"(
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "initDepositStable(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "initRedeemStable(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "initRedeemStable(uint256,address,address)"(
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isDepositAllowed(overrides?: CallOverrides): Promise<boolean>;

    isRedemptionAllowed(overrides?: CallOverrides): Promise<boolean>;

    optFactory(overrides?: CallOverrides): Promise<string>;

    optStdId(overrides?: CallOverrides): Promise<BigNumber>;

    optStore(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "redeemStable(address,uint256,address,address)"(
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "redeemStable(address,uint256)"(
      _operator: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "redeemStable(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDepositAllowance(
      _allow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperationFactory(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperationId(
      _optStdId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperationStore(_store: string, overrides?: CallOverrides): Promise<void>;

    setRedemptionAllowance(
      _allow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wUST(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    aUST(overrides?: CallOverrides): Promise<BigNumber>;

    "depositStable(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositStable(address,uint256)"(
      _operator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositStable(address,uint256,address,address)"(
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finish(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishDepositStable(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishRedeemStable(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      _type: BigNumberish,
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      _autoFinish: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initDepositStable(uint256,address,address)"(
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initDepositStable(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initRedeemStable(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initRedeemStable(uint256,address,address)"(
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isDepositAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    isRedemptionAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    optFactory(overrides?: CallOverrides): Promise<BigNumber>;

    optStdId(overrides?: CallOverrides): Promise<BigNumber>;

    optStore(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "redeemStable(address,uint256,address,address)"(
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemStable(address,uint256)"(
      _operator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemStable(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositAllowance(
      _allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperationFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperationId(
      _optStdId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperationStore(
      _store: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRedemptionAllowance(
      _allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wUST(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aUST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositStable(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositStable(address,uint256)"(
      _operator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositStable(address,uint256,address,address)"(
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finish(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishDepositStable(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishRedeemStable(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      _type: BigNumberish,
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      _autoFinish: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initDepositStable(uint256,address,address)"(
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initDepositStable(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initRedeemStable(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initRedeemStable(uint256,address,address)"(
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isDepositAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRedemptionAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optStdId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "redeemStable(address,uint256,address,address)"(
      _operator: string,
      _amount: BigNumberish,
      _swapper: string,
      _swapDest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemStable(address,uint256)"(
      _operator: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemStable(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositAllowance(
      _allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperationFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperationId(
      _optStdId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperationStore(
      _store: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRedemptionAllowance(
      _allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wUST(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
