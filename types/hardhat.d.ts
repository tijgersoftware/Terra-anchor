/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Anchor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Anchor__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "WrappedAsset",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrappedAsset__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "OperationACL",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OperationACL__factory>;
    getContractFactory(
      name: "IOperation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOperation__factory>;
    getContractFactory(
      name: "Operation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Operation__factory>;
    getContractFactory(
      name: "IOperationFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOperationFactory__factory>;
    getContractFactory(
      name: "OperationFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OperationFactory__factory>;
    getContractFactory(
      name: "OperationStandard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OperationStandard__factory>;
    getContractFactory(
      name: "IOperationStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOperationStore__factory>;
    getContractFactory(
      name: "OperationStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OperationStore__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IConversionRouterV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConversionRouterV2__factory>;
    getContractFactory(
      name: "IRouterV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouterV2__factory>;
    getContractFactory(
      name: "RouterV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RouterV2__factory>;
    getContractFactory(
      name: "ISwapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapper__factory>;
    getContractFactory(
      name: "Operator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Operator__factory>;

    getContractAt(
      name: "Anchor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Anchor>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "WrappedAsset",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrappedAsset>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "OperationACL",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OperationACL>;
    getContractAt(
      name: "IOperation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOperation>;
    getContractAt(
      name: "Operation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Operation>;
    getContractAt(
      name: "IOperationFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOperationFactory>;
    getContractAt(
      name: "OperationFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OperationFactory>;
    getContractAt(
      name: "OperationStandard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OperationStandard>;
    getContractAt(
      name: "IOperationStore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOperationStore>;
    getContractAt(
      name: "OperationStore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OperationStore>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IConversionRouterV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConversionRouterV2>;
    getContractAt(
      name: "IRouterV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouterV2>;
    getContractAt(
      name: "RouterV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RouterV2>;
    getContractAt(
      name: "ISwapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapper>;
    getContractAt(
      name: "Operator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Operator>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
